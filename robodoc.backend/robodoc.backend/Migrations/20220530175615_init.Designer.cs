// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using robodoc.backend.Data;

#nullable disable

namespace robodoc.backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220530175615_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("robodoc.backend.Data.Models.Personal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsArzt")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Personals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9eb9ac-81cd-4274-a807-d5c916294344"),
                            IsArzt = true,
                            Password = "marco",
                            Username = "Marco"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoboActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ec7b5ce-b2a9-45e8-8967-7fcad5821053"),
                            Name = "warten"
                        },
                        new
                        {
                            Id = new Guid("776dc015-ee79-4113-9f7f-7629051c0a58"),
                            Name = "einfahren"
                        },
                        new
                        {
                            Id = new Guid("75102655-24ff-4afa-a913-609ae0e4fc45"),
                            Name = "verlassen"
                        },
                        new
                        {
                            Id = new Guid("378d4f7b-3c1d-4657-a8b6-f3dd557cae60"),
                            Name = "Medikament abgeben"
                        },
                        new
                        {
                            Id = new Guid("5321d2ac-c6e9-483e-89b7-ceebaffbf923"),
                            Name = "Medikament aufnehmen"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoboOrtId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoboOrtId");

                    b.ToTable("RoboActivityStatus");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoboOrt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("455ca878-29e7-4bdb-ab87-15aa24e32b52"),
                            Name = "Apotheke"
                        },
                        new
                        {
                            Id = new Guid("7ec83f23-eb82-44c6-858c-807a95a9e1bd"),
                            Name = "Parkposition"
                        },
                        new
                        {
                            Id = new Guid("140d0611-80f2-4cb5-ad0c-27ece47ce20a"),
                            Name = "Zimmer 1"
                        },
                        new
                        {
                            Id = new Guid("c25ec9d2-4da2-43a0-9368-accff285177d"),
                            Name = "Zimmer 2"
                        },
                        new
                        {
                            Id = new Guid("deca5038-6a14-4af7-8582-6dd40a42853b"),
                            Name = "Zimmer 3"
                        },
                        new
                        {
                            Id = new Guid("0b6af1c0-e419-4413-9d2e-c8bd203a3305"),
                            Name = "Zimmer 4"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Einheit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Verabreichungsprozess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medikamente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29f8758c-d10d-4bf0-adf1-009ef1c80b68"),
                            Einheit = 0,
                            Name = "Pantoloc",
                            Verabreichungsprozess = 1
                        },
                        new
                        {
                            Id = new Guid("74e12378-7cd6-4d98-b00f-97885fd3c6c2"),
                            Einheit = 0,
                            Name = "Daflon",
                            Verabreichungsprozess = 6
                        },
                        new
                        {
                            Id = new Guid("c6c31fc4-4b47-46e7-9548-5c801bf2bcb2"),
                            Einheit = 1,
                            Name = "Vivotif",
                            Verabreichungsprozess = 1
                        },
                        new
                        {
                            Id = new Guid("185d56fa-6819-4e2e-b7af-7c6d61897ffb"),
                            Einheit = 6,
                            Name = "Hepatec",
                            Verabreichungsprozess = 3
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MedikamentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedikamentId");

                    b.HasIndex("TherapieId");

                    b.ToTable("MedikamentTherapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae666592-09d1-430b-8c44-922b63874d19"),
                            MedikamentId = new Guid("29f8758c-d10d-4bf0-adf1-009ef1c80b68"),
                            Menge = 5,
                            TherapieId = new Guid("4dd9e065-87c0-40bd-b4e7-83a5181495d4")
                        },
                        new
                        {
                            Id = new Guid("1a4b5805-61cc-4323-a7ce-90749cb2441b"),
                            MedikamentId = new Guid("74e12378-7cd6-4d98-b00f-97885fd3c6c2"),
                            Menge = 3,
                            TherapieId = new Guid("4dd9e065-87c0-40bd-b4e7-83a5181495d4")
                        },
                        new
                        {
                            Id = new Guid("04bcc4bd-2910-4489-ba47-8065c13c84d7"),
                            MedikamentId = new Guid("74e12378-7cd6-4d98-b00f-97885fd3c6c2"),
                            Menge = 2,
                            TherapieId = new Guid("2a1fc3a7-62f0-4389-b900-5717a041a30e")
                        },
                        new
                        {
                            Id = new Guid("9b709c46-db76-4352-b373-a7f9add3aec3"),
                            MedikamentId = new Guid("c6c31fc4-4b47-46e7-9548-5c801bf2bcb2"),
                            Menge = 1,
                            TherapieId = new Guid("2a1fc3a7-62f0-4389-b900-5717a041a30e")
                        },
                        new
                        {
                            Id = new Guid("8a4e84a9-8038-4115-a784-3c0b1eb7ff5a"),
                            MedikamentId = new Guid("c6c31fc4-4b47-46e7-9548-5c801bf2bcb2"),
                            Menge = 5,
                            TherapieId = new Guid("64db1d49-f0f5-412b-bfb9-14d4613d5932")
                        },
                        new
                        {
                            Id = new Guid("b7e70be0-96eb-4706-b225-b495217d5ce9"),
                            MedikamentId = new Guid("185d56fa-6819-4e2e-b7af-7c6d61897ffb"),
                            Menge = 2,
                            TherapieId = new Guid("2cfbadd5-ad2f-46b4-838b-012d1341dff8")
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Anamnese")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AustrittDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EintrittDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Zimmer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patienten");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b10ff404-1c27-46e6-a61c-032ac46556a6"),
                            Anamnese = "isch en gaile siech",
                            EintrittDatum = new DateTime(2022, 5, 30, 19, 56, 15, 482, DateTimeKind.Local).AddTicks(2102),
                            Name = "Zingg",
                            Vorname = "Joel",
                            Zimmer = 0
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Therapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dd9e065-87c0-40bd-b4e7-83a5181495d4"),
                            Name = "Diät"
                        },
                        new
                        {
                            Id = new Guid("2a1fc3a7-62f0-4389-b900-5717a041a30e"),
                            Name = "Elektrotherapie"
                        },
                        new
                        {
                            Id = new Guid("64db1d49-f0f5-412b-bfb9-14d4613d5932"),
                            Name = "Hydrotherapie"
                        },
                        new
                        {
                            Id = new Guid("2cfbadd5-ad2f-46b4-838b-012d1341dff8"),
                            Name = "Atlaslogie"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArztId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Intervall")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PersonalId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ArztId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonalId");

                    b.HasIndex("TherapieId");

                    b.ToTable("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TherapieverfahrenId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Zeitpunkt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TherapieverfahrenId");

                    b.ToTable("Durchfuehrungen");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.RoboActivity", "RoboActivity")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.RoboOrt", "RoboOrt")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("RoboOrtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoboActivity");

                    b.Navigation("RoboOrt");
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Medikament", "Medikament")
                        .WithMany("MedikamentTherapies")
                        .HasForeignKey("MedikamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany("MedikamentTherapies")
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medikament");

                    b.Navigation("Therapie");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.Personal", "Arzt")
                        .WithMany()
                        .HasForeignKey("ArztId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Patient", "Patient")
                        .WithMany("Therapieverfahren")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.Personal", "Zustaendigkeit")
                        .WithMany()
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany("Therapieverfahren")
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arzt");

                    b.Navigation("Patient");

                    b.Navigation("Therapie");

                    b.Navigation("Zustaendigkeit");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Therapieverfahren", "Therapieverfahren")
                        .WithMany("TherapieverfahrenDurchfuehrungen")
                        .HasForeignKey("TherapieverfahrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.Navigation("MedikamentTherapies");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Navigation("MedikamentTherapies");

                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Navigation("TherapieverfahrenDurchfuehrungen");
                });
#pragma warning restore 612, 618
        }
    }
}
