// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using robodoc.backend.Data;

#nullable disable

namespace robodoc.backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("robodoc.backend.Data.Models.Personal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsArzt")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Personal");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9a51945-5573-454c-9299-86f0fe8390c0"),
                            IsArzt = true,
                            Password = "marco",
                            Username = "Marco"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoboActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f404617-cc32-42e5-8849-a7d1a38fe09a"),
                            Name = "warten"
                        },
                        new
                        {
                            Id = new Guid("3e59fd46-4ce0-479c-b985-a3c03dec7b3c"),
                            Name = "einfahren"
                        },
                        new
                        {
                            Id = new Guid("03a26a66-a9a4-430d-bf44-513ab1a8d993"),
                            Name = "verlassen"
                        },
                        new
                        {
                            Id = new Guid("56915204-6c19-48dd-9c2c-de146f9a1191"),
                            Name = "Medikament abgeben"
                        },
                        new
                        {
                            Id = new Guid("14d98aeb-006c-439c-9198-f2188f23ca00"),
                            Name = "Medikament aufnehmen"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoboOrtId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoboOrtId");

                    b.ToTable("RoboActivityStatus");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoboOrt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa53884e-ca3c-422d-a78b-f3eda204252b"),
                            Name = "Apotheke"
                        },
                        new
                        {
                            Id = new Guid("39a6e97a-6e86-432d-8137-00804ff8385d"),
                            Name = "Parkposition"
                        },
                        new
                        {
                            Id = new Guid("d76d3fc8-5ec1-485c-8b88-00970ec44352"),
                            Name = "Zimmer 1"
                        },
                        new
                        {
                            Id = new Guid("c86c0b75-7bde-4126-9dea-f2fc3808edc3"),
                            Name = "Zimmer 2"
                        },
                        new
                        {
                            Id = new Guid("b29cfbba-afd1-405c-977c-4ef56a7f8275"),
                            Name = "Zimmer 3"
                        },
                        new
                        {
                            Id = new Guid("7c47db25-0fd5-497a-a435-42e47a001452"),
                            Name = "Zimmer 4"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Einheit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Verabreichungsprozess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medikamente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0eae707-b4fa-4b08-8293-d4d3f0b37e43"),
                            Einheit = 0,
                            Name = "Pantoloc",
                            Verabreichungsprozess = 1
                        },
                        new
                        {
                            Id = new Guid("ca60f396-61b2-4ab5-b45a-3c83cef54e03"),
                            Einheit = 0,
                            Name = "Daflon",
                            Verabreichungsprozess = 6
                        },
                        new
                        {
                            Id = new Guid("337ebc27-e1f2-490a-8b6a-1eb407305da5"),
                            Einheit = 1,
                            Name = "Vivotif",
                            Verabreichungsprozess = 1
                        },
                        new
                        {
                            Id = new Guid("66ccb405-8ede-48e5-a935-294fcfaa9cba"),
                            Einheit = 6,
                            Name = "Hepatec",
                            Verabreichungsprozess = 3
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MedikamentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedikamentId");

                    b.HasIndex("TherapieId");

                    b.ToTable("MedikamentTherapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8f0b558-a670-42b2-b4ae-865bb87df185"),
                            MedikamentId = new Guid("a0eae707-b4fa-4b08-8293-d4d3f0b37e43"),
                            Menge = 5,
                            TherapieId = new Guid("c002c1c6-2e2c-4dfb-b6cc-f27a9fcd1f1f")
                        },
                        new
                        {
                            Id = new Guid("ca78533f-a6d3-4c7a-8dd5-060287292e13"),
                            MedikamentId = new Guid("ca60f396-61b2-4ab5-b45a-3c83cef54e03"),
                            Menge = 3,
                            TherapieId = new Guid("c002c1c6-2e2c-4dfb-b6cc-f27a9fcd1f1f")
                        },
                        new
                        {
                            Id = new Guid("05715788-51e5-4708-8d56-ee6a101796a9"),
                            MedikamentId = new Guid("ca60f396-61b2-4ab5-b45a-3c83cef54e03"),
                            Menge = 2,
                            TherapieId = new Guid("68dc1fb9-eea1-4169-b327-dde17ea8c8e3")
                        },
                        new
                        {
                            Id = new Guid("efc06bb2-a941-4f75-89a2-2649a27eba1c"),
                            MedikamentId = new Guid("337ebc27-e1f2-490a-8b6a-1eb407305da5"),
                            Menge = 1,
                            TherapieId = new Guid("68dc1fb9-eea1-4169-b327-dde17ea8c8e3")
                        },
                        new
                        {
                            Id = new Guid("af3b5dec-d5e0-43b0-96a2-7a3a1f608cd3"),
                            MedikamentId = new Guid("337ebc27-e1f2-490a-8b6a-1eb407305da5"),
                            Menge = 5,
                            TherapieId = new Guid("9c32eaed-c031-4167-9158-ba096b9ce6b0")
                        },
                        new
                        {
                            Id = new Guid("c70c921f-accb-4dec-9a39-a9f4a1fc993d"),
                            MedikamentId = new Guid("66ccb405-8ede-48e5-a935-294fcfaa9cba"),
                            Menge = 2,
                            TherapieId = new Guid("a523fef0-2b70-4bb7-b8cf-3d0c4e9b5355")
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Anamnese")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AustrittDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EintrittDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Zimmer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patienten");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2dbbaa6-8dd7-4793-9931-7ffab903b7ad"),
                            Anamnese = "Velounfall",
                            EintrittDatum = new DateTime(2022, 6, 27, 14, 31, 11, 657, DateTimeKind.Local).AddTicks(1596),
                            Name = "Zingg",
                            Vorname = "Joel",
                            Zimmer = 0
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Therapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c002c1c6-2e2c-4dfb-b6cc-f27a9fcd1f1f"),
                            Name = "Diät"
                        },
                        new
                        {
                            Id = new Guid("68dc1fb9-eea1-4169-b327-dde17ea8c8e3"),
                            Name = "Elektrotherapie"
                        },
                        new
                        {
                            Id = new Guid("9c32eaed-c031-4167-9158-ba096b9ce6b0"),
                            Name = "Hydrotherapie"
                        },
                        new
                        {
                            Id = new Guid("a523fef0-2b70-4bb7-b8cf-3d0c4e9b5355"),
                            Name = "Atlaslogie"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArztId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Intervall")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PersonalId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ArztId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonalId");

                    b.HasIndex("TherapieId");

                    b.ToTable("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TherapieverfahrenId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Zeitpunkt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TherapieverfahrenId");

                    b.ToTable("TherapieverfahrenDurchfuehrung");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.RoboActivity", "RoboActivity")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.RoboOrt", "RoboOrt")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("RoboOrtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoboActivity");

                    b.Navigation("RoboOrt");
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Medikament", "Medikament")
                        .WithMany()
                        .HasForeignKey("MedikamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany("MedikamentTherapies")
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medikament");

                    b.Navigation("Therapie");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.Personal", "Arzt")
                        .WithMany()
                        .HasForeignKey("ArztId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Patient", "Patient")
                        .WithMany("Therapieverfahren")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.Personal", "Zustaendigkeit")
                        .WithMany()
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany()
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arzt");

                    b.Navigation("Patient");

                    b.Navigation("Therapie");

                    b.Navigation("Zustaendigkeit");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Therapieverfahren", "Therapieverfahren")
                        .WithMany("TherapieverfahrenDurchfuehrungen")
                        .HasForeignKey("TherapieverfahrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Navigation("MedikamentTherapies");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Navigation("TherapieverfahrenDurchfuehrungen");
                });
#pragma warning restore 612, 618
        }
    }
}
