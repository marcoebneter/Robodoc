// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using robodoc.backend.Data;

#nullable disable

namespace robodoc.backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("robodoc.backend.Data.Models.Personal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsArzt")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Personal");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5958e5f5-c8a8-4751-ab89-7104ff4d0ea1"),
                            IsArzt = true,
                            Password = "marco",
                            Username = "Marco"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoboActivity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc51587d-4270-47fe-b751-f994dbfd673a"),
                            Name = "warten"
                        },
                        new
                        {
                            Id = new Guid("111d27c5-d72f-4fc6-8415-1b4a6870c81f"),
                            Name = "einfahren"
                        },
                        new
                        {
                            Id = new Guid("ff900d5d-54ba-4aea-895d-c2fa176e6c70"),
                            Name = "verlassen"
                        },
                        new
                        {
                            Id = new Guid("ee226288-0e07-4ee1-b5c2-b1d119c4eb02"),
                            Name = "Medikament abgeben"
                        },
                        new
                        {
                            Id = new Guid("ce205808-d69c-4e0d-a160-abfc28ed3a5f"),
                            Name = "Medikament aufnehmen"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoboOrtId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoboOrtId");

                    b.ToTable("RoboActivityStatus");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoboOrt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3e990e7-750d-4b93-acab-b827b4949caa"),
                            Name = "Apotheke"
                        },
                        new
                        {
                            Id = new Guid("4ff91abb-aa89-438a-b372-08cea1aa2d1c"),
                            Name = "Parkposition"
                        },
                        new
                        {
                            Id = new Guid("e300980c-e256-4a95-bd57-e8c25ef03fe8"),
                            Name = "Zimmer 1"
                        },
                        new
                        {
                            Id = new Guid("fe21a516-21a8-49fc-be21-52501e68995f"),
                            Name = "Zimmer 2"
                        },
                        new
                        {
                            Id = new Guid("38de3dea-05cc-434f-a80c-b2bab69d3b1f"),
                            Name = "Zimmer 3"
                        },
                        new
                        {
                            Id = new Guid("ebe91e3b-4cd2-4606-85d5-94ce6bcba347"),
                            Name = "Zimmer 4"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Einheit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Verabreichungsprozess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medikamente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a2af162-ff10-425c-a118-c9ee5847a19e"),
                            Einheit = 0,
                            Name = "Pantoloc",
                            Verabreichungsprozess = 1
                        },
                        new
                        {
                            Id = new Guid("a2a14aea-beb8-4fa2-80bf-ed6aab87920a"),
                            Einheit = 0,
                            Name = "Daflon",
                            Verabreichungsprozess = 6
                        },
                        new
                        {
                            Id = new Guid("dd9c72f8-4813-44f2-a044-d019a02c7126"),
                            Einheit = 1,
                            Name = "Vivotif",
                            Verabreichungsprozess = 1
                        },
                        new
                        {
                            Id = new Guid("f495af6d-028c-4f87-8389-3a1daf5d32ad"),
                            Einheit = 6,
                            Name = "Hepatec",
                            Verabreichungsprozess = 3
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MedikamentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedikamentId");

                    b.HasIndex("TherapieId");

                    b.ToTable("MedikamentTherapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42edb2fa-fd3a-413e-9018-e1e0ee9531de"),
                            MedikamentId = new Guid("9a2af162-ff10-425c-a118-c9ee5847a19e"),
                            Menge = 5,
                            TherapieId = new Guid("83760435-0110-4dac-89f6-d659c2f18881")
                        },
                        new
                        {
                            Id = new Guid("d7679f96-1c92-4a8d-b367-226a78d4b9c6"),
                            MedikamentId = new Guid("a2a14aea-beb8-4fa2-80bf-ed6aab87920a"),
                            Menge = 3,
                            TherapieId = new Guid("83760435-0110-4dac-89f6-d659c2f18881")
                        },
                        new
                        {
                            Id = new Guid("0ce18834-8b5d-4d6d-9f24-711270b728eb"),
                            MedikamentId = new Guid("a2a14aea-beb8-4fa2-80bf-ed6aab87920a"),
                            Menge = 2,
                            TherapieId = new Guid("5621ef19-b226-46e1-80bc-d10d91f15141")
                        },
                        new
                        {
                            Id = new Guid("433cdf53-3f12-46e0-b5d5-3154b2a787b5"),
                            MedikamentId = new Guid("dd9c72f8-4813-44f2-a044-d019a02c7126"),
                            Menge = 1,
                            TherapieId = new Guid("5621ef19-b226-46e1-80bc-d10d91f15141")
                        },
                        new
                        {
                            Id = new Guid("3f56568d-6db2-418a-9098-b4cf9d703cd2"),
                            MedikamentId = new Guid("dd9c72f8-4813-44f2-a044-d019a02c7126"),
                            Menge = 5,
                            TherapieId = new Guid("ded82ea3-620b-462a-87bc-bb7a821cd38b")
                        },
                        new
                        {
                            Id = new Guid("2ae41840-6d92-40de-9aa5-0a7761f8174c"),
                            MedikamentId = new Guid("f495af6d-028c-4f87-8389-3a1daf5d32ad"),
                            Menge = 2,
                            TherapieId = new Guid("1e0012f3-3e5e-489a-a574-c02e6b5e948c")
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Anamnese")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AustrittDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EintrittDatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Zimmer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patienten");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a11ab567-7901-4b26-ab24-1abec539655a"),
                            Anamnese = "isch en gaile siech",
                            EintrittDatum = new DateTime(2022, 6, 15, 17, 10, 27, 816, DateTimeKind.Local).AddTicks(3326),
                            Name = "Zingg",
                            Vorname = "Joel",
                            Zimmer = 0
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Therapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83760435-0110-4dac-89f6-d659c2f18881"),
                            Name = "Diät"
                        },
                        new
                        {
                            Id = new Guid("5621ef19-b226-46e1-80bc-d10d91f15141"),
                            Name = "Elektrotherapie"
                        },
                        new
                        {
                            Id = new Guid("ded82ea3-620b-462a-87bc-bb7a821cd38b"),
                            Name = "Hydrotherapie"
                        },
                        new
                        {
                            Id = new Guid("1e0012f3-3e5e-489a-a574-c02e6b5e948c"),
                            Name = "Atlaslogie"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArztId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Intervall")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PersonalId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ArztId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonalId");

                    b.HasIndex("TherapieId");

                    b.ToTable("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TherapieverfahrenId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Zeitpunkt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TherapieverfahrenId");

                    b.ToTable("TherapieverfahrenDurchfuehrung");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.RoboActivity", "RoboActivity")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.RoboOrt", "RoboOrt")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("RoboOrtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoboActivity");

                    b.Navigation("RoboOrt");
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Medikament", "Medikament")
                        .WithMany()
                        .HasForeignKey("MedikamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany("MedikamentTherapies")
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medikament");

                    b.Navigation("Therapie");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.Personal", "Arzt")
                        .WithMany()
                        .HasForeignKey("ArztId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Patient", "Patient")
                        .WithMany("Therapieverfahren")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.Personal", "Zustaendigkeit")
                        .WithMany()
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany()
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arzt");

                    b.Navigation("Patient");

                    b.Navigation("Therapie");

                    b.Navigation("Zustaendigkeit");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Therapieverfahren", "Therapieverfahren")
                        .WithMany("TherapieverfahrenDurchfuehrungen")
                        .HasForeignKey("TherapieverfahrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Navigation("MedikamentTherapies");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Navigation("TherapieverfahrenDurchfuehrungen");
                });
#pragma warning restore 612, 618
        }
    }
}
