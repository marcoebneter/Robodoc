// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using robodoc.backend.Data;

#nullable disable

namespace robodoc.backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoboActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f908d1c6-dcf4-4030-8e71-8cb770f1537f"),
                            Name = "warten"
                        },
                        new
                        {
                            Id = new Guid("d49f19d7-2c5a-4ac0-bc3d-4a6102c92d19"),
                            Name = "einfahren"
                        },
                        new
                        {
                            Id = new Guid("df61a496-1289-47fb-960b-7dd0ff23aac3"),
                            Name = "verlassen"
                        },
                        new
                        {
                            Id = new Guid("10b24b40-3637-4d37-af21-d739827bb724"),
                            Name = "Medikament abgeben"
                        },
                        new
                        {
                            Id = new Guid("e417d778-8b01-45a5-ae3a-c55a5874bab4"),
                            Name = "Medikament aufnehmen"
                        });
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("RoboOrtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoboOrtId");

                    b.ToTable("RoboActivityStatus", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoboOrts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e5af09d-0850-4004-8764-3ba3cdb46da5"),
                            Name = "Apotheke"
                        },
                        new
                        {
                            Id = new Guid("f9de62cb-bdb6-4530-ab62-bc49107f5728"),
                            Name = "Parkposition"
                        },
                        new
                        {
                            Id = new Guid("4b7d4da0-649f-461b-82c1-7ffd15fe4821"),
                            Name = "Zimmer 1"
                        },
                        new
                        {
                            Id = new Guid("e038a641-5c81-426d-8305-b70f3832ed03"),
                            Name = "Zimmer 2"
                        },
                        new
                        {
                            Id = new Guid("c3c4b841-5341-40f5-ac43-150af238b944"),
                            Name = "Zimmer 3"
                        },
                        new
                        {
                            Id = new Guid("c368affa-52ff-4c72-97d8-9f1d0808a154"),
                            Name = "Zimmer 4"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Einheit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VerabreichungsprozessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VerabreichungsprozessId");

                    b.ToTable("Medikamente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2930a89-02a7-4de8-9e0e-28287c90c3f1"),
                            Einheit = 0,
                            Name = "Pantoloc",
                            VerabreichungsprozessId = new Guid("0ba7bf6e-1be8-462d-ac00-e0a87307aca0")
                        },
                        new
                        {
                            Id = new Guid("d45d58a1-3290-4cfd-bf73-ba6bed3fd22d"),
                            Einheit = 0,
                            Name = "Daflon",
                            VerabreichungsprozessId = new Guid("0ba7bf6e-1be8-462d-ac00-e0a87307aca0")
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedikamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Menge")
                        .HasColumnType("int");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedikamentId");

                    b.HasIndex("TherapieId");

                    b.ToTable("MedikamentTherapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2182886-1eaf-46b9-8958-31cb02b448c5"),
                            MedikamentId = new Guid("b2930a89-02a7-4de8-9e0e-28287c90c3f1"),
                            Menge = 5,
                            TherapieId = new Guid("7f5c7716-980f-42ed-8e96-0ad1b8703f0f")
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anamnese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AustrittDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EintrittDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patienten");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67015aba-1dac-4eec-a71e-aa63703dd6a2"),
                            Anamnese = "isch en gaile siech",
                            EintrittDatum = new DateTime(2022, 2, 28, 19, 11, 6, 158, DateTimeKind.Local).AddTicks(4902),
                            Name = "Zingg",
                            Vorname = "Joel"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Therapien");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f5c7716-980f-42ed-8e96-0ad1b8703f0f"),
                            Name = "eine Therapie"
                        });
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Intervall")
                        .HasColumnType("time");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TherapieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonalId");

                    b.HasIndex("TherapieId");

                    b.ToTable("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TherapieverfahrenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Zeitpunkt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TherapieverfahrenId");

                    b.ToTable("Durchfuehrungen");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Verabreichungsprozess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Verabreichungsprozesse");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ed28017-735a-4f82-b88c-d20f5712cd1d"),
                            Name = "oral"
                        },
                        new
                        {
                            Id = new Guid("0ba7bf6e-1be8-462d-ac00-e0a87307aca0"),
                            Name = "lingual"
                        },
                        new
                        {
                            Id = new Guid("307a99c2-ac0f-4e4f-9d4c-5487e6bb7ded"),
                            Name = "sublingual"
                        },
                        new
                        {
                            Id = new Guid("323abd05-d54b-4d8c-ac11-270ee0a11795"),
                            Name = "intravenös"
                        },
                        new
                        {
                            Id = new Guid("78f5d5cd-b297-4907-abd1-ffe74e5bd57d"),
                            Name = "intraarteriell"
                        },
                        new
                        {
                            Id = new Guid("69e19fa3-68cd-491f-b032-f35cd141925f"),
                            Name = "intramuskulär"
                        },
                        new
                        {
                            Id = new Guid("f2614d47-29d2-4bfc-9783-9a250baeb3b3"),
                            Name = "kutan"
                        },
                        new
                        {
                            Id = new Guid("b3aefdaf-c5c1-49c5-bd21-c8624c3acbfa"),
                            Name = "subkutan"
                        },
                        new
                        {
                            Id = new Guid("c97b2829-05ef-47a8-aeb7-7fb36c29c69c"),
                            Name = "intrakutan"
                        },
                        new
                        {
                            Id = new Guid("92d22f8c-1e23-4be5-b0db-cdbd1155e875"),
                            Name = "perkutan"
                        },
                        new
                        {
                            Id = new Guid("87938db6-3349-437e-a245-1d4589bc858f"),
                            Name = "nasal"
                        },
                        new
                        {
                            Id = new Guid("94440bb6-8db0-472b-8ebf-3db51c988efb"),
                            Name = "konjunktival"
                        },
                        new
                        {
                            Id = new Guid("f14fb665-f2b1-4922-8857-b330756376a7"),
                            Name = "rektal"
                        },
                        new
                        {
                            Id = new Guid("4cf7b2ff-6fac-4f90-b9b7-9e879d478a3d"),
                            Name = "vaginal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivityStatus", b =>
                {
                    b.HasOne("robodoc.backend.Data.Models.RoboActivity", "RoboActivity")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("robodoc.backend.Data.Models.RoboOrt", "RoboOrt")
                        .WithMany("ActivityStatuses")
                        .HasForeignKey("RoboOrtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoboActivity");

                    b.Navigation("RoboOrt");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Verabreichungsprozess", "Verabreichungsprozess")
                        .WithMany("Medikamente")
                        .HasForeignKey("VerabreichungsprozessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Verabreichungsprozess");
                });

            modelBuilder.Entity("Robodoc.Data.Models.MedikamentTherapie", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Medikament", "Medikament")
                        .WithMany("MedikamentTherapies")
                        .HasForeignKey("MedikamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany("MedikamentTherapies")
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medikament");

                    b.Navigation("Therapie");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Patient", "Patient")
                        .WithMany("Therapieverfahren")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Zustaendigkeit")
                        .WithMany()
                        .HasForeignKey("PersonalId");

                    b.HasOne("Robodoc.Data.Models.Therapie", "Therapie")
                        .WithMany("Therapieverfahren")
                        .HasForeignKey("TherapieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Therapie");

                    b.Navigation("Zustaendigkeit");
                });

            modelBuilder.Entity("Robodoc.Data.Models.TherapieverfahrenDurchfuehrung", b =>
                {
                    b.HasOne("Robodoc.Data.Models.Therapieverfahren", "Therapieverfahren")
                        .WithMany("TherapieverfahrenDurchfuehrungen")
                        .HasForeignKey("TherapieverfahrenId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboActivity", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("robodoc.backend.Data.Models.RoboOrt", b =>
                {
                    b.Navigation("ActivityStatuses");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Medikament", b =>
                {
                    b.Navigation("MedikamentTherapies");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Patient", b =>
                {
                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapie", b =>
                {
                    b.Navigation("MedikamentTherapies");

                    b.Navigation("Therapieverfahren");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Therapieverfahren", b =>
                {
                    b.Navigation("TherapieverfahrenDurchfuehrungen");
                });

            modelBuilder.Entity("Robodoc.Data.Models.Verabreichungsprozess", b =>
                {
                    b.Navigation("Medikamente");
                });
#pragma warning restore 612, 618
        }
    }
}
